USAR_INKEY = 1
USAR_HGRPRINT = 1
USAR_CHR_96_127 = 0
;EXTRA_CHR = 

BYTES_POR_LINHA = 32
LINHAS_POR_CARACTER = 8

usrloc = 0x0304
yxcord = 0x0115
ycord = yxcord
xcord = yxcord+1
key0 = 0x011b
job = 0x0120
invflg = 0x0352
ramtop = 0x3fff
vram = 0x8000
vramof = 0xc879
vramon = 0xc886
resto = 0xdd61
teclap = 0xdddf
alen = 0xe8a1

	.area CODE (ABS)
        .org 0x03d5 ; Endereço padrão de início do programa BASIC.

;instala:
;
;	.if USAR_INKEY
;inkey_instala:
;; Direciona o hook JOB (chamado em SKEY?) para a rotina "checa".
;        ld hl,#inkey_checa
;        ld (job+1),hl
;        ld a,#0xc3
;        ld (job),a
;        ret;
;	.endif ; .if USAR_INKEY
;	
;	.if USAR_HGRPRINT
;hgrprint_instala:
;; Direciona função USR() para a rotina "hgrprint".
;	ld hl,#hgrprint
;	ld (usrloc),hl
;	.endif ; .if USAR_HGRPRINT
;
;	ret

	.if USAR_INKEY
inkey_checa:
; Verifica se estamos em meio ao CALL KEY? feito em 0xdd5a,
        ld hl,#+14
        add hl,sp
        ld a,(hl)
        cp #0x5d
        ret nz
        inc hl
        ld a,(hl)
        cp #0xdd
        ret nz
; Sim: Modifica a pilha do Z80 para que, ao final da
; rotina SKEY?, o controle não volte para KEY?, mas
; para nossa rotina personalizada "inkey_desvia".
	ld hl,#+8
        add hl,sp
        ld de,#inkey_desvia
        ld (hl),e
        inc hl
        ld (hl),d
        ret

inkey_desvia:
; Restaura pilha e registradores como estariam
; ao final da execução de KEY?, e desvia
; para os pontos apropriados do interpretador
; BASIC, evitando o CALL KEY em 0xdddc.
        pop bc ; Desempilha valores empilhados por KEY?
        pop de
 
        inc sp ; Descarta o ponto de retorno original.
        inc sp
 
        ld (key0+4),a ; FUNCIONALIDADE ADICIONAL:
                      ; Salva em KEY0+4 a informação sobre se
                      ; uma tecla foi pressionada (0xFF) ou não (0x00).
        or a
 
        ld a,(key0)   ; Copia código da tecla em KEY0+1.
        ld (key0+1),a ; (É algo que a rotina KEY? faz.)
 
        call nz,teclap ; Se tecla pressionada, chama rotina
                       ; de tratamento situada logo depois a problemática
                       ; instrução CALL KEY.
        jp resto       ; Retorna para o interpretador BASIC.
	.endif ; .if USAR_INKEY

	.if USAR_HGRPRINT
hgrprint:
; Desempilha string. Retorna se "".
        call alen
        ret z
; B = tamanho da string.
        ld b,a
; HL = endereço da string.
        inc hl
        inc hl
        ld c,(hl)
        inc hl
        ld h,(hl)
        ld l,c
; DE = posição de escrita na VRAM:
; VRAM + y * 8 * 32 + x.
        push hl
        ld hl,#yxcord
        ld d,(hl)
        inc hl
        ld e,(hl)
        ld hl,#vram
        add hl,de
        ex de,hl
        pop hl
; Habilita VRAM para escrita.
        call vramon
; Para cada caracter da string…
loop1:
        ld a,(hl)
; Ignora caracteres de controle (ASCII < 32).
        sub #32
        jr c,nxtchr
; Salva dados do laço externo.
        push hl
        push de
        push bc
; Calcula posição na tabela de caracteres:
; CHRTBL + a * 8.
        ld h,#0
        ld l,a
        add hl,hl
        add hl,hl
        add hl,hl
        ld bc,#chrtbl
        add hl,bc
; C = Máscara para XOR: 0x00 (NORMAL) ou 0xFF (INVERSE).
        ld a,(invflg)
        sub #1
        sbc a,a
        cpl
        ld c,a
; Transfere os 8 bytes do caracter para a VRAM.
        ld b,#8 ; 8 bytes por caracter.
loop2:
        ld a,(hl)
        xor c ; NORMAL 0x00 ou INVERSE 0xFF
        ld (de),a
        inc hl
        ld a,e
        add a,#32 ; 32 bytes por linha.
        ld e,a
        ld a,d
        adc a,#0
        ld d,a
        djnz loop2
; Restaura dados do laço externo.
        pop bc
        pop de
        pop hl
; Avança posição de escrita na VRAM.
        inc de
; Avança para o próximo caracter.
nxtchr:
        inc hl
        djnz loop1
; Desabilita VRAM e retorna.
        jp vramof

; Tabela de caracteres.
chrtbl: .db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; espaço
        .db 0x10,0x10,0x10,0x10,0x10,0x00,0x10,0x00 ; !
        .db 0x28,0x28,0x28,0x00,0x00,0x00,0x00,0x00 ; "
        .db 0x28,0x28,0x7c,0x28,0x7c,0x28,0x28,0x00 ; #
        .db 0x10,0x3c,0x50,0x38,0x14,0x78,0x10,0x00 ; $
        .db 0x60,0x64,0x08,0x10,0x20,0x4c,0x0c,0x00 ; %
        .db 0x20,0x50,0x50,0x20,0x54,0x48,0x34,0x00 ; &
        .db 0x10,0x10,0x10,0x00,0x00,0x00,0x00,0x00 ; '
        .db 0x08,0x10,0x20,0x20,0x20,0x10,0x08,0x00 ; (
        .db 0x20,0x10,0x08,0x08,0x08,0x10,0x20,0x00 ; )
        .db 0x10,0x54,0x38,0x10,0x38,0x54,0x10,0x00 ; *
        .db 0x00,0x10,0x10,0x7c,0x10,0x10,0x00,0x00 ; +
        .db 0x00,0x00,0x00,0x00,0x10,0x10,0x20,0x00 ; ,
        .db 0x00,0x00,0x00,0x7c,0x00,0x00,0x00,0x00 ; -
        .db 0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00 ; .
        .db 0x00,0x04,0x08,0x10,0x20,0x40,0x00,0x00 ; /
        .db 0x38,0x44,0x4c,0x54,0x64,0x44,0x38,0x00 ; 0
        .db 0x10,0x30,0x10,0x10,0x10,0x10,0x38,0x00 ; 1
        .db 0x38,0x44,0x04,0x18,0x20,0x40,0x7c,0x00 ; 2
        .db 0x7c,0x04,0x08,0x18,0x04,0x44,0x38,0x00 ; 3
        .db 0x08,0x18,0x28,0x48,0x7c,0x08,0x08,0x00 ; 4
        .db 0x7c,0x40,0x78,0x04,0x04,0x44,0x38,0x00 ; 5
        .db 0x1c,0x20,0x40,0x78,0x44,0x44,0x38,0x00 ; 6
        .db 0x7c,0x04,0x08,0x10,0x20,0x20,0x20,0x00 ; 7
        .db 0x38,0x44,0x44,0x38,0x44,0x44,0x38,0x00 ; 8
        .db 0x38,0x44,0x44,0x3c,0x04,0x08,0x70,0x00 ; 9
        .db 0x00,0x00,0x10,0x00,0x10,0x00,0x00,0x00 ; :
        .db 0x00,0x00,0x10,0x00,0x10,0x10,0x20,0x00 ; ;
        .db 0x08,0x10,0x20,0x40,0x20,0x10,0x08,0x00 ; <
        .db 0x00,0x00,0x7c,0x00,0x7c,0x00,0x00,0x00 ; =
        .db 0x20,0x10,0x08,0x04,0x08,0x10,0x20,0x00 ; >
        .db 0x38,0x44,0x08,0x10,0x10,0x00,0x10,0x00 ; ?
        .db 0x38,0x44,0x54,0x5c,0x58,0x40,0x3c,0x00 ; @
        .db 0x10,0x28,0x44,0x44,0x7c,0x44,0x44,0x00 ; A
        .db 0x78,0x44,0x44,0x78,0x44,0x44,0x78,0x00 ; B
        .db 0x38,0x44,0x40,0x40,0x40,0x44,0x38,0x00 ; C
        .db 0x78,0x44,0x44,0x44,0x44,0x44,0x78,0x00 ; D
        .db 0x7c,0x40,0x40,0x78,0x40,0x40,0x7c,0x00 ; E
        .db 0x7c,0x40,0x40,0x78,0x40,0x40,0x40,0x00 ; F
        .db 0x3c,0x40,0x40,0x40,0x4c,0x44,0x3c,0x00 ; G
        .db 0x44,0x44,0x44,0x7c,0x44,0x44,0x44,0x00 ; H
        .db 0x38,0x10,0x10,0x10,0x10,0x10,0x38,0x00 ; I
        .db 0x04,0x04,0x04,0x04,0x04,0x44,0x38,0x00 ; J
        .db 0x44,0x48,0x50,0x60,0x50,0x48,0x44,0x00 ; K
        .db 0x40,0x40,0x40,0x40,0x40,0x40,0x7c,0x00 ; L
        .db 0x44,0x6c,0x54,0x54,0x44,0x44,0x44,0x00 ; M
        .db 0x44,0x44,0x64,0x54,0x4c,0x44,0x44,0x00 ; N
        .db 0x38,0x44,0x44,0x44,0x44,0x44,0x38,0x00 ; O
        .db 0x78,0x44,0x44,0x78,0x40,0x40,0x40,0x00 ; P
        .db 0x38,0x44,0x44,0x44,0x54,0x48,0x34,0x00 ; Q
        .db 0x78,0x44,0x44,0x78,0x50,0x48,0x44,0x00 ; R
        .db 0x38,0x44,0x40,0x38,0x04,0x44,0x38,0x00 ; S
        .db 0x7c,0x10,0x10,0x10,0x10,0x10,0x10,0x00 ; T
        .db 0x44,0x44,0x44,0x44,0x44,0x44,0x38,0x00 ; U
        .db 0x44,0x44,0x44,0x44,0x44,0x28,0x10,0x00 ; V
        .db 0x44,0x44,0x44,0x54,0x54,0x6c,0x44,0x00 ; W
        .db 0x44,0x44,0x28,0x10,0x28,0x44,0x44,0x00 ; X
        .db 0x44,0x44,0x28,0x10,0x10,0x10,0x10,0x00 ; Y
        .db 0x7c,0x04,0x08,0x10,0x20,0x40,0x7c,0x00 ; Z
        .db 0x7c,0x60,0x60,0x60,0x60,0x60,0x7c,0x00 ; [
        .db 0x00,0x40,0x20,0x10,0x08,0x04,0x00,0x00 ; \
        .db 0x7c,0x0c,0x0c,0x0c,0x0c,0x0c,0x7c,0x00 ; ]
        .db 0x00,0x00,0x10,0x28,0x44,0x00,0x00,0x00 ; ^
        .db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f ; _
	.if USAR_CHR_96_127
        .db 0x20,0x10,0x08,0x00,0x00,0x00,0x00,0x00 ; `
        .db 0x00,0x00,0x38,0x04,0x3c,0x44,0x3c,0x00 ; a
        .db 0x40,0x40,0x78,0x44,0x44,0x44,0x78,0x00 ; b
        .db 0x00,0x00,0x3c,0x40,0x40,0x40,0x3c,0x00 ; c
        .db 0x04,0x04,0x3c,0x44,0x44,0x44,0x3c,0x00 ; d
        .db 0x00,0x00,0x38,0x44,0x7c,0x40,0x3c,0x00 ; e
        .db 0x18,0x24,0x20,0x78,0x20,0x20,0x20,0x00 ; f
        .db 0x00,0x00,0x38,0x44,0x44,0x3c,0x04,0x38 ; g
        .db 0x40,0x40,0x78,0x44,0x44,0x44,0x44,0x00 ; h
        .db 0x10,0x00,0x30,0x10,0x10,0x10,0x38,0x00 ; i
        .db 0x08,0x00,0x18,0x08,0x08,0x08,0x48,0x30 ; j
        .db 0x40,0x40,0x44,0x48,0x70,0x48,0x44,0x00 ; k
        .db 0x30,0x10,0x10,0x10,0x10,0x10,0x38,0x00 ; l
        .db 0x00,0x00,0x6c,0x54,0x54,0x54,0x44,0x00 ; m
        .db 0x00,0x00,0x78,0x44,0x44,0x44,0x44,0x00 ; n
        .db 0x00,0x00,0x38,0x44,0x44,0x44,0x38,0x00 ; o
        .db 0x00,0x00,0x78,0x44,0x44,0x78,0x40,0x40 ; p
        .db 0x00,0x00,0x3c,0x44,0x44,0x3c,0x04,0x04 ; q
        .db 0x00,0x00,0x5c,0x60,0x40,0x40,0x40,0x00 ; r
        .db 0x00,0x00,0x3c,0x40,0x38,0x04,0x78,0x00 ; s
        .db 0x20,0x20,0x78,0x20,0x20,0x24,0x18,0x00 ; t
        .db 0x00,0x00,0x44,0x44,0x44,0x4c,0x34,0x00 ; u
        .db 0x00,0x00,0x44,0x48,0x28,0x30,0x10,0x00 ; v
        .db 0x00,0x00,0x44,0x44,0x54,0x54,0x6c,0x00 ; w
        .db 0x00,0x00,0x44,0x28,0x10,0x28,0x44,0x00 ; x
        .db 0x00,0x00,0x44,0x48,0x28,0x30,0x10,0x60 ; y
        .db 0x00,0x00,0x7c,0x08,0x10,0x20,0x7c,0x00 ; z
        .db 0x1c,0x30,0x30,0x60,0x30,0x30,0x1c,0x00 ; {
        .db 0x10,0x10,0x10,0x00,0x10,0x10,0x10,0x00 ; |
        .db 0x70,0x18,0x18,0x0c,0x18,0x18,0x70,0x00 ; }
        .db 0x2c,0x50,0x00,0x00,0x00,0x00,0x00,0x00 ; ~
        .db 0x00,0x10,0x24,0x48,0x10,0x24,0x48,0x00 ; DEL
	.endif ; .if USAR_CHR_96_127
;	.iff EXTRA_CHR
;	.ds CHR_EXTRA * 8
;	.endif ; .if EXTRA_CHR
	.endif ; .if USAR_HGRPRINT
